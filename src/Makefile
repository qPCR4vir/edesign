# ======================================================================
# Copyright (c) 2013,2014,2015 RIKEN and K.K.DNAFORM. All Rights Reserved
# The Edesign is based on the Primer3 program (version 2.3.4) of the Whitehead Institute (http://primer3.ut.ee/).
# 
#       This file is part of Edesign software.
#
#       This software is free software;
#       you can redistribute it and/or modify it under the terms
#       of the GNU General Public License as published by the Free
#       Software Foundation; either version 2 of the License, or (at
#       your option) any later version.
#
#       This software is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#
#       You should have received a copy of the GNU General Public License
#       along with this software (file gpl-2.0.txt in the source
#       distribution); if not, write to the Free Software
#       Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON A THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# ======================================================================

# For VALGRIND -- see end of this makefile for testing binary
# with valgrind, a leak and memory access checker.
TESTOPTS= 
WINMAKE=mingw32-make

LDLIBS     = -lm
AR         = ar
CC         = gcc
CPP        = g++
O_OPTS     = -O2
CC_OPTS    = -g -Wall -D__USE_FIXED_PROTOTYPES__
P_DEFINES  =

CFLAGS  = $(CC_OPTS) $(O_OPTS)
LDFLAGS = -g
# Note, for profiling, use
# make O_OPTS='-pg -O0' LDFLAGS='-g -pg'

# ======================================================================
# If you have trouble with library skew when moving Edesign executables
# between systems, you might want to set LIBOPTS to -static
LIBOPTS =

ifeq ($(TESTOPTS),--windows)
	PRIMER_EXE      = edesign_core_TE.exe
	NTDPAL_EXE	= ntdpal_TE.exe
	NTTHAL_EXE	= ntthal_TE.exe
	OLIGOTM_EXE	= oligotm_TE.exe
	LONG_SEQ_EXE	= long_seq_tm_test_TE.exe
else
	PRIMER_EXE      = edesign_core_TE
	NTDPAL_EXE	= ntdpal_TE
	NTTHAL_EXE	= ntthal_TE
	OLIGOTM_EXE	= oligotm_TE
	LONG_SEQ_EXE	= long_seq_tm_test_TE
endif
LIBOLIGOTM      = liboligotm_Z.a
LIBOLIGOTM_DYN  = liboligotm_Z.so.1.2.0
LIBDPAL         = libdpal_Z.a
LIBDPAL_DYN     = libdpal_Z.a.so.1.0.0
LIBTHAL         = libthal_Z.a
LIBTHAL_DYN     = libthal_Z.a.so.1.0.0
LIBPRIMER3      = libprimer3_Z.a
LIBPRIMER3_DYN  = libprimer3_Z.so.1.0.0
LIBRARIES       = $(LIBPRIMER3) $(LIBDPAL) $(LIBTHAL) $(LIBOLIGOTM) 
DYNLIBS         = $(LIBPRIMER3_DYN) $(LIBDPAL_DYN) $(LIBTHAL_DYN) $(LIBOLIGOTM_DYN)
RANLIB          = ranlib

PRIMER_OBJECTS1=primer3_boulder_main_Z.o\
                format_output_Z.o\
                read_boulder_Z.o\
                print_boulder_Z.o 

PRIMER_OBJECTS=$(PRIMER_OBJECTS1) $(LIBRARIES)
PRIMER_DYN_OBJECTS=$(PRIMER_OBJECTS1) $(DYNLIBS)
# These are files generated by running ./$(PRIMER_EXE) < ../example
example_files=example.for example.rev example.int

EXES=$(PRIMER_EXE) $(NTDPAL_EXE) $(NTTHAL_EXE) $(OLIGOTM_EXE) $(LONG_SEQ_EXE)

all: $(EXES) $(LIBRARIES)

debug: CFLAGS = -g -O0 -Wall -D__USE_FIXED_PROTOTYPES__
debug: all

clean_src:
ifeq ($(TESTOPTS),--windows)
	del /Q /F *.o $(EXES) *~ $(LIBRARIES) $(example_files) core ..\*~
else
	-rm -f *.o $(EXES) *~ $(LIBRARIES) $(DYNLIBS) $(example_files) core ../*~
endif

clean: clean_src
ifeq ($(TESTOPTS),--windows)
	cd ..\test & $(WINMAKE) clean TESTOPTS=$(TESTOPTS)
else
	cd ../test/; make clean
endif

$(LIBOLIGOTM): oligotm_Z.o
	$(AR) rv $@ oligotm_Z.o
	$(RANLIB) $@

$(LIBOLIGOTM_LIB): oligotm_Z.o
	$(CC) -shared -W1,-soname,liboligotm_Z.so.1 -o $(LIBOLIGOTM_DYN) oligotm_Z.o

$(LIBDPAL): dpal_primer_Z.o
	$(AR) rv $@ dpal_primer_Z.o
	$(RANLIB) $@

$(LIBDPAL_DYN): dpal_primer_Z.o
	$(CC) -shared -W1,-soname,libdpal_Z.so.1 -o $(LIBDPAL_DYN_LIB) dpal_primer_Z.o

$(LIBTHAL): thal_primer_Z.o
	$(AR) rv $@ thal_primer_Z.o
	$(RANLIB) $@

$(LIBTHAL_DYN): thal_primer_Z.o
	$(CC) -shared -W1,-soname,libthal_Z.so.1 -o $(LIBTHAL_DYN_LIB) thal_primer_Z.o

$(LIBPRIMER3): libprimer3_Z.o p3_seq_lib_Z.o
	$(AR) rv $@ libprimer3_Z.o p3_seq_lib_Z.o
	$(RANLIB) $@

$(LIBPRIMER3_DYN): libprimer3_Z.o p3_seq_lib_Z.o
	$(CC) -shared -W1,-soname,liprimer3_Z.so.1 -o $(LIBPRIMER3_DYN) libprimer3_Z.o p3_seq_lib_Z.o

$(PRIMER_EXE): $(PRIMER_OBJECTS)
	$(CPP) $(LDFLAGS) -o $@ $(PRIMER_OBJECTS) $(LIBOPTS) $(LDLIBS)

libprimer3_Z.o: libprimer3_Z.c libprimer3_Z.h p3_seq_lib_Z.h dpal_Z.h thal_Z.h oligotm_Z.h
	$(CPP) -c $(CFLAGS) -Wno-deprecated $(P_DEFINES) -o $@ libprimer3_Z.c

$(NTDPAL_EXE): ntdpal_main_Z.o dpal_Z.o
	$(CPP) $(LDFLAGS) -o $@ ntdpal_main_Z.o dpal_Z.o

$(NTTHAL_EXE): thal_main_Z.o thal_Z.o
	$(CPP) $(LDFLAGS) -o $@ thal_main_Z.o thal_Z.o $(LDLIBS)

$(OLIGOTM_EXE): oligotm_main_Z.c oligotm_Z.h $(LIBOLIGOTM)
	$(CPP) $(CFLAGS) -o $@ oligotm_main_Z.c $(LIBOLIGOTM) $(LIBOPTS) $(LDLIBS)

$(LONG_SEQ_EXE): long_seq_tm_test_main_Z.c oligotm_Z.o
	$(CPP) $(CFLAGS) -o $@ long_seq_tm_test_main_Z.c oligotm_Z.o $(LIBOPTS) $(LDLIBS)

read_boulder_Z.o: read_boulder_Z.c read_boulder_Z.h libprimer3_Z.h dpal_Z.h thal_Z.h p3_seq_lib_Z.h modification_Z.h
	$(CPP) -c $(CFLAGS) $(P_DEFINES) -o $@ read_boulder_Z.c

print_boulder_Z.o: print_boulder_Z.c print_boulder_Z.h libprimer3_Z.h p3_seq_lib_Z.h 
	$(CPP) -c $(CFLAGS) $(P_DEFINES) -o $@ print_boulder_Z.c

dpal_Z.o: dpal_Z.c dpal_Z.h modification_Z.h
	$(CPP) -c $(CFLAGS) -o $@ dpal_Z.c

# We use '-ffloat-store' on windows to prevent undesirable
# precision which may lead to differences in floating point results.
thal_Z.o: thal_Z.c thal_Z.h
	$(CPP) -c $(CFLAGS) -ffloat-store -o $@ thal_Z.c

p3_seq_lib_Z.o: p3_seq_lib_Z.c p3_seq_lib_Z.h libprimer3_Z.h
	$(CPP) -c $(CFLAGS) -o $@ p3_seq_lib_Z.c

dpal_primer_Z.o: dpal_Z.c dpal_Z.h modification_Z.h
	$(CPP) -c $(CFLAGS) $(P_DEFINES) -o $@ dpal_Z.c

thal_primer_Z.o: thal_Z.c thal_Z.h
	$(CPP) -c $(CFLAGS) -ffloat-store $(P_DEFINES) -o $@ thal_Z.c

format_output_Z.o: format_output_Z.c format_output_Z.h libprimer3_Z.h dpal_Z.h thal_Z.h p3_seq_lib_Z.h 
	$(CPP) -c $(CFLAGS) $(P_DEFINES) -o $@ format_output_Z.c

ntdpal_main_Z.o: ntdpal_main_Z.c dpal_Z.h modification_Z.h
	$(CPP) -c $(CC_OPTS) -o $@ ntdpal_main_Z.c

thal_main_Z.o: thal_main_Z.c thal_Z.h
	$(CPP) -c $(CFLAGS) -o $@ thal_main_Z.c
# We use CC_OPTS above rather than CFLAGS because
# gcc 2.7.2 crashes while compiling ntdpal_main.c with -O2

oligotm_Z.o: oligotm_Z.c oligotm_Z.h

primer3_boulder_main_Z.o: primer3_boulder_main_Z.c libprimer3_Z.h dpal_Z.h thal_Z.h oligotm_Z.h format_output_Z.h print_boulder_Z.h read_boulder_Z.h modification_Z.h
	$(CPP) -c $(CFLAGS) $(P_DEFINES) primer3_boulder_main_Z.c

primer_test: test

test: $(PRIMER_EXE) $(NTDPAL_EXE) $(NTTHAL_EXE)
ifeq ($(TESTOPTS),--windows)
	cd ..\test & $(WINMAKE) TESTOPTS=$(TESTOPTS)
else
	cd ../test; make test
endif

# ======================================================================
# 
# VALGRIND INSTRUCTIONS.
# 
# These instructions work for linux, and run the 'memcheck'
# functionality of valgrind.  Tests will be _much_ slower
# when running with valgrind checks.
# 
# If necessary, get and install valgrind (should come with most
# Linux's, but you need valgrind >= 3.2.3)
# 
# Example:
# $ valgrind --leak-check=yes --show-reachable=yes ./$(PRIMER_EXE) -format_output < ../example
#
# ======================================================================
